using System.Security.Cryptography;

namespace CapstoneDb.Services
{
    public class PasswordHasher
    {
        private static readonly HashAlgorithmName rng = HashAlgorithmName.SHA256;
        private static readonly int SaltSize = 16; // random generated byte array that will be added to the hash
        private static readonly int HashSize = 32; // 32 * 8(1 byte) = 256
        private static readonly int Iterations = 10000; // number of iterations on how many times the password will be iterated

        public static string HashPassword(string password)
        {
            var salt = RandomNumberGenerator.GetBytes(SaltSize); // Salt Generator
            var hash = Rfc2898DeriveBytes.Pbkdf2(password, salt, Iterations, rng, HashSize); // Password Hashing

            return string.Join(';', Convert.ToBase64String(salt), Convert.ToBase64String(hash)); // String to be saved in the DB
        }

        public static bool VerifyPassword(string password, string hashedPassword)
        {
            var joinedElements = hashedPassword.Split(';');  // Reverse process for line 17
            var salt = Convert.FromBase64String(joinedElements[0]);
            var hash = Convert.FromBase64String(joinedElements[1]);

            var hashContainer = Rfc2898DeriveBytes.Pbkdf2(password, salt, Iterations, rng, HashSize); // Password Hashing for the password entered during log in

            return CryptographicOperations.FixedTimeEquals(hash, hashContainer); // Comparing the hashed password from db and from line 26

        }
    }
}
